## Организация пакетов
Эта организация пакетов называется "Layered Architecture" (Многоуровневая архитектура);
реализуется с использованием принципов Domain-Driven Design (DDD)

Что тут вообще за пакеты?
________________________________________________________________________________________________________________

### .domain - (Слой домена)

----------- Что тут храниться: ----------------

* JPA Entities - Основные объекты, которые напрямую отображаются на таблицы в БД (@Entity).
Они содержат данные и базовые методы для работы с этими данными
* Value Objects - Объекты, которые представляют собой значение, а не идентичность (например: Money, Address).
Часто они неизменяемы
* Domain Services - Сложная бизнес-логика, которая не принадлежит ни одной сущности, но требует взаимодействия
нескольких сущностей
* Enums - Перечисляемые типы, используемые в домене (например: OrderStatus, UserRole)

---------- Для чего этот пакет? --------------

Это сердце бизнес-логики. Эти классы должны быть максимально независимы от фреймворков (Spring, JPA) -
В идеале их можно тестировать без запуска Spring Context. Крч это обеспечивает гибкость и упрощает тестирование

________________________________________________________________________________________________________________

### .repository - (Слой данных)

----------- Что тут храниться: ----------------

* Interfaces - Интерфейсы расширяющие Spring Data JPA (JpaRepository, CrudRepository и тд).
Они определяют методы для доступа к данным (CRUD - операции, пользовательские запросы)

---------- Для чего этот пакет? --------------

Цель - абстрагировать взаимодействие с БД. Репозитории отвечают за то, чтобы получать данные из базы и
сохранять их обратно. Они знают как работать с JPA Entities, но не содержат бизнес-логики.
Spring Data JPA АВТОМАТИЧЕСКИ генерирует реализации для этих интерфейсов.

________________________________________________________________________________________________________________

### .service - (Слой приложений)

----------- Что тут храниться: ----------------

* Interfaces (api или interfaces) - Определяют "контракт" сервиса - публичный API для др. частей приложения.
Позволяют легче подменять реализации (например: для mocking в тестах) и упрощают тестирование.
* Implementation (impl) - РЕАЛИЗАЦИИ бизнес-логики.
Эти классы обычно помечаются @Service. Они организовывают работу одного или нескольких репозиториев,
применяют бизнес-правила, управляют транзакциями (@Transactional)

---------- Для чего этот пакет? --------------

Цель - реализация бизнес логики приложения. Сервисы - это "движок" приложения.
Они не должны напрямую взаимодействовать с HTTP (это задача контроллеров), а только работать с сущностями домена
и данными из репозиториев.

________________________________________________________________________________________________________________

### .controller - (Слой Презентации Backend / REST API)

----------- Что тут храниться: ----------------

* Controllers - Классы, помеченные как @RestController. Они принимают входящие HTTP - запросы, обрабатывают их
(например: парсинг JSON), вызывают соответствующие методы СЕРВИСОВ и формируют HTTP - ответы.

---------- Для чего этот пакет? --------------

Цель - предоставить ВЕБ-ИНТЕРФЕЙС к приложению. Контроллеры - точка входа для внешних запросов. Они должны быть
максимально "тонкими", перенаправляя основную работу в слой сервисов.

________________________________________________________________________________________________________________

### .service.dto - (Data Transfer Objects)

----------- Что тут храниться: ----------------

* DTOs - Классы, используемые для передачи данных между разными СЛОЯМИ, а главное - между Backend и Frontend
(или другими внешними клиентами). Они изолируют внутреннюю структуру ДОМЕНА от внешнего API.

---------- Для чего этот пакет? --------------

Цель - обеспечить безопасный и контролируемый обмен данными.
DTO позволяют:
- Не раскрывать внутренние детали JPA-сущностей (например: lazy-загруженные поля, которые могут вызвать
ошибки при сериализации).
- Изменять структуру API, не ломая внутреннюю структуру ДОМЕНА.
- Агрегировать данные из нескольких сущностей для удобства клиента.

________________________________________________________________________________________________________________

### .config - (Конфигурация)

----------- Что тут храниться: ----------------

*Классы, помеченные @Configuration и @Bean.
Здесь настраиваются различные аспекты приложения:
- Настройка Spring Security.
- Настройка CORS (Cross-Origin Resource Sharing).
- Конфигурация DataSource (подключение к базе данных).
- Настройка JPA/Hibernate.
- Любые пользовательские Bean-ы.

---------- Для чего этот пакет? --------------

Цель - Сделать приложение настраиваемым и управляемым.

________________________________________________________________________________________________________________

### .security - (Безопасность) (Пока не реализовано)

----------- Что тут храниться: ----------------

* SecurityConfig: Основная конфигурация Spring Security.
* JwtUtil / TokenProvider: Логика для работы с JSON Web Tokens (генерация, валидация).
* AuthService: Сервис для обработки логина, регистрации, выдачи токенов.
* UserDetailsService, PasswordEncoder: Реализации для Spring Security.

---------- Для чего этот пакет? --------------

Цель - Реализовать аутентификацию, авторизацию и защиту приложения.




